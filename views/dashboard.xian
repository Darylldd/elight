<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Smart Lighting</title>
    <link href="/tailwind.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Navigation -->
    <nav class="bg-blue-600 text-white shadow-lg">
        <div class="container mx-auto px-4">
            <div class="flex justify-between items-center py-4">
                <h1 class="text-2xl font-bold">Smart Lighting System</h1>
                <div class="flex items-center space-x-4">
                    <a href="/dashboard" class="px-3 py-2 rounded hover:bg-blue-700">Dashboard</a>
                    <a href="/monitoring" class="px-3 py-2 rounded hover:bg-blue-700">Monitoring</a>
                    <a href="/settings" class="px-3 py-2 rounded hover:bg-blue-700">Settings</a>
                    <a href="/history" class="px-3 py-2 rounded hover:bg-blue-700">History</a>
                    <a href="/notifications" class="px-3 py-2 rounded hover:bg-blue-700 relative">
                        Notifications
                        <span id="notificationBadge" class="absolute -top-1 -right-1 bg-red-500 text-xs rounded-full h-5 w-5 flex items-center justify-center hidden">0</span>
                    </a>
                    <a href="/logout" class="px-3 py-2 rounded hover:bg-blue-700">Logout</a>
                </div>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="mb-8">
            <h2 class="text-3xl font-bold text-gray-800">Smart Lighting Dashboard</h2>
            <p class="text-gray-600">Overview and quick access to your smart lighting system</p>
        </div>

        <!-- Stats Overview -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-green-100 text-green-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Online Devices</p>
                        <p id="onlineCount" class="text-2xl font-semibold text-gray-900">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Lights On</p>
                        <p id="lightsOnCount" class="text-2xl font-semibold text-gray-900">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Power Usage</p>
                        <p id="powerUsage" class="text-2xl font-semibold text-gray-900">0W</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Active Schedules</p>
                        <p id="activeSchedules" class="text-2xl font-semibold text-gray-900">0</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <h3 class="text-xl font-semibold mb-4">Quick Actions</h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <button onclick="turnAllLightsOn()" class="bg-green-600 text-white py-3 px-4 rounded hover:bg-green-700 flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
                    </svg>
                    <span>Turn All Lights On</span>
                </button>
                <button onclick="turnAllLightsOff()" class="bg-red-600 text-white py-3 px-4 rounded hover:bg-red-700 flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
                    </svg>
                    <span>Turn All Lights Off</span>
                </button>
                <button onclick="setEveningMode()" class="bg-purple-600 text-white py-3 px-4 rounded hover:bg-purple-700 flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
                    </svg>
                    <span>Set Evening Mode</span>
                </button>
            </div>
        </div>

        <!-- System Overview -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Recent Devices -->
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-xl font-semibold mb-4">Recent Devices</h3>
                <div class="space-y-4" id="recentDevices">
                    <!-- Devices will be populated here by JavaScript -->
                </div>
                <a href="/monitoring" class="block text-center mt-4 text-blue-600 hover:text-blue-800">View All Devices â†’</a>
            </div>

            <!-- System Status -->
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-xl font-semibold mb-4">System Status</h3>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">System Uptime</span>
                        <span class="font-medium" id="systemUptime">24h 15m</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">Last Update</span>
                        <span class="font-medium" id="lastUpdate">2 min ago</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">Network Status</span>
                        <span class="flex items-center text-green-600">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            Online
                        </span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">API Status</span>
                        <span class="flex items-center text-green-600">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            Connected
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Navigation -->
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <h3 class="text-xl font-semibold mb-4">Quick Navigation</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <a href="/monitoring" class="bg-blue-600 text-white p-4 rounded hover:bg-blue-700 flex items-center justify-between">
                    <span>Device Monitoring</span>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </a>
                <a href="/settings" class="bg-green-600 text-white p-4 rounded hover:bg-green-700 flex items-center justify-between">
                    <span>Settings</span>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </a>
                <a href="/history" class="bg-purple-600 text-white p-4 rounded hover:bg-purple-700 flex items-center justify-between">
                    <span>Usage History</span>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </a>
                <a href="/notifications" class="bg-orange-600 text-white p-4 rounded hover:bg-orange-700 flex items-center justify-between">
                    <span>Notifications</span>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </a>
            </div>
        </div>

        <!-- Power Consumption Chart -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-xl font-semibold mb-4">Today's Power Consumption</h3>
            <canvas id="powerChart" height="100"></canvas>
        </div>
    </div>

    <script>
        // Dashboard functionality
        class DashboardManager {
            constructor() {
                this.devices = [];
                this.chart = null;
                this.init();
            }

            async init() {
                await this.loadDevices();
                await this.loadNotifications();
                this.initChart();
                this.startRealTimeUpdates();
            }

            async loadDevices() {
                try {
                    const response = await fetch('/api/devices');
                    this.devices = await response.json();
                    this.renderRecentDevices();
                    this.updateStats();
                } catch (error) {
                    console.error('Error loading devices:', error);
                    // Generate sample data for demo
                    this.generateSampleDevices();
                    this.renderRecentDevices();
                    this.updateStats();
                }
            }

            generateSampleDevices() {
                this.devices = [
                    {
                        id: 1,
                        name: 'Living Room Light',
                        deviceId: 'lr1',
                        status: 'on',
                        brightness: 85,
                        color: '#ffffff',
                        powerConsumption: 45.2,
                        location: 'Living Room',
                        lastSeen: new Date()
                    },
                    {
                        id: 2,
                        name: 'Bedroom Light',
                        deviceId: 'br1',
                        status: 'off',
                        brightness: 0,
                        color: '#ffffff',
                        powerConsumption: 0,
                        location: 'Bedroom',
                        lastSeen: new Date()
                    },
                    {
                        id: 3,
                        name: 'Kitchen Light',
                        deviceId: 'kt1',
                        status: 'on',
                        brightness: 60,
                        color: '#ffffff',
                        powerConsumption: 32.1,
                        location: 'Kitchen',
                        lastSeen: new Date()
                    }
                ];
            }

            renderRecentDevices() {
                const container = document.getElementById('recentDevices');
                container.innerHTML = '';

                // Show only first 3 devices for dashboard
                const displayDevices = this.devices.slice(0, 3);

                displayDevices.forEach(device => {
                    const deviceElement = this.createDeviceElement(device);
                    container.appendChild(deviceElement);
                });
            }

            createDeviceElement(device) {
                const element = document.createElement('div');
                element.className = 'flex items-center justify-between p-3 border rounded';
                
                const statusColor = device.status === 'on' ? 'text-green-600' : 
                                   device.status === 'off' ? 'text-red-600' : 'text-yellow-600';
                
                const statusText = device.status.charAt(0).toUpperCase() + device.status.slice(1);

                element.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <div class="w-3 h-3 rounded-full ${statusColor} bg-opacity-20 ${statusColor.replace('text-', 'bg-')}"></div>
                        <div>
                            <div class="font-medium">${device.name}</div>
                            <div class="text-sm text-gray-600">${device.location}</div>
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="font-medium">${device.brightness}%</div>
                        <div class="text-sm text-gray-600">${device.powerConsumption}W</div>
                    </div>
                `;

                return element;
            }

            updateStats() {
                const onlineCount = this.devices.filter(d => d.lastSeen && new Date(d.lastSeen) > new Date(Date.now() - 5 * 60 * 1000)).length;
                const lightsOnCount = this.devices.filter(d => d.status === 'on').length;
                const totalPower = this.devices.reduce((sum, device) => sum + device.powerConsumption, 0);

                document.getElementById('onlineCount').textContent = onlineCount;
                document.getElementById('lightsOnCount').textContent = lightsOnCount;
                document.getElementById('powerUsage').textContent = `${totalPower}W`;

                // Update system info
                document.getElementById('lastUpdate').textContent = 'Just now';
            }

            async loadNotifications() {
                try {
                    const response = await fetch('/api/notifications');
                    const notifications = await response.json();
                    const unreadCount = notifications.filter(n => !n.read).length;
                    
                    const badge = document.getElementById('notificationBadge');
                    if (unreadCount > 0) {
                        badge.textContent = unreadCount;
                        badge.classList.remove('hidden');
                    } else {
                        badge.classList.add('hidden');
                    }
                } catch (error) {
                    console.error('Error loading notifications:', error);
                }
            }

            initChart() {
                const ctx = document.getElementById('powerChart').getContext('2d');
                this.chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: Array.from({length: 24}, (_, i) => `${i}:00`),
                        datasets: [{
                            label: 'Power Consumption (W)',
                            data: Array.from({length: 24}, () => Math.random() * 80 + 20),
                            borderColor: 'rgb(59, 130, 246)',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Watts (W)'
                                }
                            }
                        }
                    }
                });
            }

            startRealTimeUpdates() {
                // Simulate real-time updates
                setInterval(() => {
                    this.simulateDeviceUpdates();
                }, 30000); // Update every 30 seconds
            }

            simulateDeviceUpdates() {
                // In a real app, this would come from WebSocket updates
                this.devices.forEach(device => {
                    if (device.status === 'on') {
                        device.powerConsumption = Math.random() * 50 + 10;
                    }
                });
                this.updateStats();
                
                // Update chart with new data
                if (this.chart) {
                    const newData = Array.from({length: 24}, () => Math.random() * 80 + 20);
                    this.chart.data.datasets[0].data = newData;
                    this.chart.update('none');
                }
            }
        }

        // Quick action functions
        async function turnAllLightsOn() {
            try {
                const response = await fetch('/api/devices');
                const devices = await response.json();
                
                const promises = devices.map(device => 
                    fetch(`/api/devices/${device.id}/status`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status: 'on', brightness: 100 })
                    })
                );
                
                await Promise.all(promises);
                showToast('All lights turned on', 'success');
                setTimeout(() => dashboard.loadDevices(), 1000);
            } catch (error) {
                console.error('Error turning on lights:', error);
                showToast('Error turning on lights', 'error');
            }
        }

        async function turnAllLightsOff() {
            try {
                const response = await fetch('/api/devices');
                const devices = await response.json();
                
                const promises = devices.map(device => 
                    fetch(`/api/devices/${device.id}/status`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status: 'off', brightness: 0 })
                    })
                );
                
                await Promise.all(promises);
                showToast('All lights turned off', 'success');
                setTimeout(() => dashboard.loadDevices(), 1000);
            } catch (error) {
                console.error('Error turning off lights:', error);
                showToast('Error turning off lights', 'error');
            }
        }

        async function setEveningMode() {
            try {
                const response = await fetch('/api/devices');
                const devices = await response.json();
                
                const promises = devices.map(device => 
                    fetch(`/api/devices/${device.id}/status`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status: 'on', brightness: 30, color: '#ffd700' })
                    })
                );
                
                await Promise.all(promises);
                showToast('Evening mode activated', 'success');
                setTimeout(() => dashboard.loadDevices(), 1000);
            } catch (error) {
                console.error('Error setting evening mode:', error);
                showToast('Error setting evening mode', 'error');
            }
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg text-white ${
                type === 'success' ? 'bg-green-600' : 
                type === 'error' ? 'bg-red-600' : 'bg-blue-600'
            }`;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        // Initialize dashboard
        const dashboard = new DashboardManager();
    </script>
</body>
</html>